Parameters:
  latestec2amiid:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Latest EC2 AMI from Systems Manager Parameter Store.
  cwflowlogsparameter:
    Type: String
    Default: /aws/vpc/securitydemo/flowlogs
    Description: The cloudwatch log group name for VPC flow logs.
  securityserviceuserdata:
    Type: String
    Default: guardduty
    AllowedValues:
      - inspector
      - guardduty
    Description: "This will determine the EC2 user data script to generate real findings. Allowed values are: inspector, guardduty, macie, or consolidated"
  SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  S3BucketCode:
    Type: String
    Default: "awsiammedia"
    Description: S3 Bucket that will contain Lambda code referenced within this sample.
  S3AutoDeleteCode: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/s3autodeletecustomresource.zip"
    Description: S3 Bucket prefix for the code to delete objects in buckets provisioned as part of this sample.
  S3DeploymentUserDataLayer: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/s3deploymentuserdatalayer.zip"
    Description: S3 Bucket prefix for the lambda layer to store the EC2 user data in S3.
  S3DeploymentUserData: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/s3deploymentuserdata.zip"
    Description: S3 Bucket prefix for the code to store the EC2 user data in S3.
  EcrCleanup: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/ecrcleanup.zip"
    Description: S3 Bucket prefix for the code to cleanup vuln ECR images deployed as part of this sample.
  EcrCleanupOnDelete: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/ecrcleanupondelete.zip"
    Description: S3 Bucket prefix for the code to cleanup on a CFN destroy of vuln ECR images deployed as part of this sample.
  CWLogRetetion: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/cwlogretention.zip"
    Description: S3 Bucket prefix for the code to set the cloudwatch log retention. 
  GDThreatList: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/gdthreatlist.zip"
    Description: S3 Bucket prefix for the code to create and add GuardDuty threat lists for EC2 instances deployed as part of this sample. 
  GDThreatListUpdate: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/gdthreatlistupdate.zip" 
    Description: S3 Bucket prefix for the code to update and add GuardDuty threat lists for EC2 instances deployed as part of this sample. 
  GDIamRemediate: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/gdiamremediate.zip" 
    Description: S3 Bucket prefix for the code to respond and mitigate IAM resources deployed as part of this sample. 
  GDEksRemediate: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/gdeksremediate.zip" 
    Description: S3 Bucket prefix for the code to respond and mitigate EKS resources deployed as part of this sample. 
  EksCleanup: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/ekscleanup.zip"
    Description: S3 Bucket prefix for the code to cleanup EKS resources deployed as part of this sample.
  EksCleanupOnDelete: 
    Type: String
    Default: "public/sample/1426-generate-security-services-findings/ekscleanupondelete.zip"
    Description: S3 Bucket prefix for the code to cleanup on a CFN destroy of EKS resources deployed as part of this sample.
Resources:
  cwflowlogs3E4CC8F1:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Ref: cwflowlogsparameter
      RetentionInDays: 365
      Tags:
        - Key: security-demo
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  securitydemoparameter0ACE2DB9:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: .*
      Description: "This will determine the EC2 user data script to generate real findings. Allowed values are: inspector, guardduty, macie, or consolidated."
      Name: /security-demo-user-data
      Tags:
        security-demo: "true"
      Tier: Standard
      Type: String
      Value:
        Ref: securityserviceuserdata
  securitydemovpc19F98734:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
  securitydemovpcdemopublicsubnetSubnet1Subnet20F86AF9:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 172.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: demo_public_subnet
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_public_subnetSubnet1
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemopublicsubnetSubnet1RouteTable425FA69A:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_public_subnetSubnet1
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemopublicsubnetSubnet1RouteTableAssociation987A2BE2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: securitydemovpcdemopublicsubnetSubnet1RouteTable425FA69A
      SubnetId:
        Ref: securitydemovpcdemopublicsubnetSubnet1Subnet20F86AF9
  securitydemovpcdemopublicsubnetSubnet1DefaultRoute93D38512:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: securitydemovpcIGW650426DD
      RouteTableId:
        Ref: securitydemovpcdemopublicsubnetSubnet1RouteTable425FA69A
    DependsOn:
      - securitydemovpcVPCGWCB57A544
  securitydemovpcdemopublicsubnetSubnet1EIP409A760F:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_public_subnetSubnet1
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
  securitydemovpcdemopublicsubnetSubnet1NATGatewayDDB85835:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - securitydemovpcdemopublicsubnetSubnet1EIP409A760F
          - AllocationId
      SubnetId:
        Ref: securitydemovpcdemopublicsubnetSubnet1Subnet20F86AF9
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_public_subnetSubnet1
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
    DependsOn:
      - securitydemovpcdemopublicsubnetSubnet1DefaultRoute93D38512
      - securitydemovpcdemopublicsubnetSubnet1RouteTableAssociation987A2BE2
  securitydemovpcdemopublicsubnetSubnet2Subnet92C97794:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 172.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: demo_public_subnet
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_public_subnetSubnet2
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemopublicsubnetSubnet2RouteTable0BF013E9:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_public_subnetSubnet2
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemopublicsubnetSubnet2RouteTableAssociationF548484C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: securitydemovpcdemopublicsubnetSubnet2RouteTable0BF013E9
      SubnetId:
        Ref: securitydemovpcdemopublicsubnetSubnet2Subnet92C97794
  securitydemovpcdemopublicsubnetSubnet2DefaultRoute371EB58B:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: securitydemovpcIGW650426DD
      RouteTableId:
        Ref: securitydemovpcdemopublicsubnetSubnet2RouteTable0BF013E9
    DependsOn:
      - securitydemovpcVPCGWCB57A544
  securitydemovpcdemoprivateisosubnetSubnet1SubnetA3E5A884:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 172.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: demo_private_iso_subnet
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_private_iso_subnetSubnet1
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemoprivateisosubnetSubnet1RouteTable98300A7F:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_private_iso_subnetSubnet1
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemoprivateisosubnetSubnet1RouteTableAssociation846F781B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: securitydemovpcdemoprivateisosubnetSubnet1RouteTable98300A7F
      SubnetId:
        Ref: securitydemovpcdemoprivateisosubnetSubnet1SubnetA3E5A884
  securitydemovpcdemoprivateisosubnetSubnet2Subnet5AC8A6B6:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 172.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: demo_private_iso_subnet
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_private_iso_subnetSubnet2
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemoprivateisosubnetSubnet2RouteTable9E8343A9:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_private_iso_subnetSubnet2
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemoprivateisosubnetSubnet2RouteTableAssociation6C3E93BD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: securitydemovpcdemoprivateisosubnetSubnet2RouteTable9E8343A9
      SubnetId:
        Ref: securitydemovpcdemoprivateisosubnetSubnet2Subnet5AC8A6B6
  securitydemovpcdemoprivatenatsubnetSubnet1SubnetF2EA78AC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 172.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: demo_private_nat_subnet
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_private_nat_subnetSubnet1
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemoprivatenatsubnetSubnet1RouteTable24820C04:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_private_nat_subnetSubnet1
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemoprivatenatsubnetSubnet1RouteTableAssociation8CB82AA3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: securitydemovpcdemoprivatenatsubnetSubnet1RouteTable24820C04
      SubnetId:
        Ref: securitydemovpcdemoprivatenatsubnetSubnet1SubnetF2EA78AC
  securitydemovpcdemoprivatenatsubnetSubnet1DefaultRoute843914D1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: securitydemovpcdemopublicsubnetSubnet1NATGatewayDDB85835
      RouteTableId:
        Ref: securitydemovpcdemoprivatenatsubnetSubnet1RouteTable24820C04
  securitydemovpcdemoprivatenatsubnetSubnet2Subnet05A280E1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 172.0.5.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: demo_private_nat_subnet
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_private_nat_subnetSubnet2
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemoprivatenatsubnetSubnet2RouteTableC76AF443:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/demo_private_nat_subnetSubnet2
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcdemoprivatenatsubnetSubnet2RouteTableAssociation65165870:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: securitydemovpcdemoprivatenatsubnetSubnet2RouteTableC76AF443
      SubnetId:
        Ref: securitydemovpcdemoprivatenatsubnetSubnet2Subnet05A280E1
  securitydemovpcdemoprivatenatsubnetSubnet2DefaultRoute730E4921:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: securitydemovpcdemopublicsubnetSubnet1NATGatewayDDB85835
      RouteTableId:
        Ref: securitydemovpcdemoprivatenatsubnetSubnet2RouteTableC76AF443
  securitydemovpcIGW650426DD:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
  securitydemovpcVPCGWCB57A544:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: securitydemovpcIGW650426DD
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcs3IAMRole5C71C7E6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/s3
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
  securitydemovpcs3IAMRoleDefaultPolicy1F2CD207:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - cwflowlogs3E4CC8F1
                - Arn
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - securitydemovpcs3IAMRole5C71C7E6
                - Arn
        Version: "2012-10-17"
      PolicyName: securitydemovpcs3IAMRoleDefaultPolicy1F2CD207
      Roles:
        - Ref: securitydemovpcs3IAMRole5C71C7E6
  securitydemovpcs3FlowLog79BD08A0:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn:
        Fn::GetAtt:
          - securitydemovpcs3IAMRole5C71C7E6
          - Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName:
        Ref: cwflowlogs3E4CC8F1
      ResourceId:
        Ref: securitydemovpc19F98734
      ResourceType: VPC
      Tags:
        - Key: Name
          Value: SecurityFindingGeneratorStack/security_demo_vpc/s3
        - Key: security_service
          Value:
            Ref: securityserviceuserdata
        - Key: security-demo
          Value: "true"
      TrafficType: ALL
  securitydemovpcec2endpoint2C8D5D74:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - securitydemosg72A385FB
            - GroupId
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .ec2
      SubnetIds:
        - Ref: securitydemovpcdemoprivatenatsubnetSubnet1SubnetF2EA78AC
      VpcEndpointType: Interface
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcec2msgendpoint0CC4EED7:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - securitydemosg72A385FB
            - GroupId
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .ec2messages
      SubnetIds:
        - Ref: securitydemovpcdemoprivatenatsubnetSubnet1SubnetF2EA78AC
      VpcEndpointType: Interface
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpckmsendpoint434E2841:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - securitydemosg72A385FB
            - GroupId
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .kms
      SubnetIds:
        - Ref: securitydemovpcdemoprivatenatsubnetSubnet1SubnetF2EA78AC
      VpcEndpointType: Interface
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcssmendpoint8B47E3A4:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - securitydemosg72A385FB
            - GroupId
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .ssm
      SubnetIds:
        - Ref: securitydemovpcdemoprivatenatsubnetSubnet1SubnetF2EA78AC
      VpcEndpointType: Interface
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcssmmsgendpoint1B6D96CA:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - securitydemosg72A385FB
            - GroupId
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .ssmmessages
      SubnetIds:
        - Ref: securitydemovpcdemoprivatenatsubnetSubnet1SubnetF2EA78AC
      VpcEndpointType: Interface
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemovpcs3endpointD663430F:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - Fn::GetAtt:
            - securitydemosg72A385FB
            - GroupId
      ServiceName: com.amazonaws.us-east-1.s3
      SubnetIds:
        - Ref: securitydemovpcdemoprivatenatsubnetSubnet1SubnetF2EA78AC
      VpcEndpointType: Interface
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemosg72A385FB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security demo workload security group.
      GroupName: security_demo_sg
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow HTTPS Outbound for Egress internet connectivity
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow HTTP Outbound for Egress internet connectivity
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow BitcoinTool (17777) Outbound for Egress internet connectivity
          FromPort: 17777
          IpProtocol: tcp
          ToPort: 17777
        - CidrIp: 0.0.0.0/0
          Description: Allow DropPoint (587) Outbound for Egress internet connectivity
          FromPort: 587
          IpProtocol: tcp
          ToPort: 587
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - securitydemovpc19F98734
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - securitydemovpc19F98734
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: security-demo
          Value: "true"
      VpcId:
        Ref: securitydemovpc19F98734
  securitydemosgtoSecurityFindingGeneratorStacksecuritydemosgAFB78EF5443948D1F4A:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow HTTPS Outbound for PrivateLink
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - securitydemosg72A385FB
          - GroupId
      FromPort: 443
      GroupId:
        Fn::GetAtt:
          - securitydemosg72A385FB
          - GroupId
      IpProtocol: tcp
      ToPort: 443
  securitydemosgfromSecurityFindingGeneratorStacksecuritydemosgAFB78EF54439F85C22D:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow HTTPS Inbound for PrivateLink
      FromPort: 443
      GroupId:
        Fn::GetAtt:
          - securitydemosg72A385FB
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - securitydemosg72A385FB
          - GroupId
      ToPort: 443
  securitydemos3userdatakey646F9E0C:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for S3 Bucket for EC2 user data scripts.
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:Describe
              - kms:GenerateDataKey
            Effect: Allow
            Principal:
              AWS:
                - Fn::GetAtt:
                    - ec2generalrole126EB842
                    - Arn
                - Fn::GetAtt:
                    - ec2instancemodulerole43B94AC9
                    - Arn
                - Fn::GetAtt:
                    - lambdathreatlistrole03396CF8
                    - Arn
                - Fn::Join:
                    - ""
                    - - "arn:aws:iam::"
                      - Ref: AWS::AccountId
                      - :role/aws-service-role/guardduty.amazonaws.com/AWSServiceRoleForAmazonGuardDuty
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource: "*"
          - Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Condition:
              StringEquals:
                kms:ViaService:
                  Fn::Join:
                    - ""
                    - - secretsmanager.
                      - Ref: AWS::Region
                      - .amazonaws.com
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
        Version: "2012-10-17"
      PendingWindowInDays: 7
      Tags:
        - Key: security-demo
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  securitydemos3userdatakeyAlias1EC53AFA:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/security_demo_s3_key
      TargetKeyId:
        Fn::GetAtt:
          - securitydemos3userdatakey646F9E0C
          - Arn
  securitydemos3userdatabucketC56A23F8:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              KMSMasterKeyID:
                Fn::GetAtt:
                  - securitydemos3userdatakey646F9E0C
                  - Arn
              SSEAlgorithm: aws:kms
      BucketName:
        Fn::Join:
          - ""
          - - security-demo-user-data-bucket
            - Ref: AWS::AccountId
            - "-"
            - Ref: AWS::Region
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
        - Key: aws-cdk:cr-owned:ec2-user-data-demo/:cc7bdfac
          Value: "true"
        - Key: security-demo
          Value: "true"
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  securitydemos3userdatabucketPolicy8A372AE6:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: securitydemos3userdatabucketC56A23F8
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - securitydemos3userdatabucketC56A23F8
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - securitydemos3userdatabucketC56A23F8
                        - Arn
                    - /*
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - securitydemos3userdatabucketC56A23F8
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - securitydemos3userdatabucketC56A23F8
                        - Arn
                    - /*
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
            Effect: Allow
            Principal:
              AWS:
                - Fn::GetAtt:
                    - ec2generalrole126EB842
                    - Arn
                - Fn::GetAtt:
                    - ec2instancemodulerole43B94AC9
                    - Arn
                - Fn::GetAtt:
                    - lambdathreatlistrole03396CF8
                    - Arn
            Resource:
              - Fn::GetAtt:
                  - securitydemos3userdatabucketC56A23F8
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - securitydemos3userdatabucketC56A23F8
                        - Arn
                    - /*
        Version: "2012-10-17"
  securitydemos3userdatabucketAutoDeleteObjectsCustomResourceC86418C3:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: securitydemos3userdatabucketC56A23F8
    DependsOn:
      - securitydemos3userdatabucketPolicy8A372AE6
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: S3AutoDeleteCode
      Timeout: 900
      MemorySize: 128
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs18.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: securitydemos3userdatabucketC56A23F8
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
  securitydemos3userdatabucketparameter668DD41E:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: .*
      Description: Bucket name to use to enable for CloudTrail.
      Name: /security_demo_s3_user_data_bucket_parameter
      Tags:
        security-demo: "true"
      Tier: Standard
      Type: String
      Value:
        Ref: securitydemos3userdatabucketC56A23F8
  userdataassetdeploymentAwsCliLayer6CA537FA:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: S3DeploymentUserDataLayer
      Description: /opt/awscli/aws
  userdataassetdeploymentCustomResourceA93FD77E:
    Type: Custom::CDKBucketDeployment
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536
          - Arn
      SourceBucketNames:
        - Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
      SourceObjectKeys:
        - ff4bdf56328c70bc9e552dc771b028382e90a1ea83c166b068a219629e02d35c.zip
      DestinationBucketName:
        Ref: securitydemos3userdatabucketC56A23F8
      DestinationBucketKeyPrefix: ec2-user-data-demo/
      RetainOnDelete: false
      Prune: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: security-demo
          Value: "true"
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":s3:::"
                    - Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
                    - /*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":s3:::"
                    - Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - securitydemos3userdatabucketC56A23F8
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - securitydemos3userdatabucketC56A23F8
                        - Arn
                    - /*
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - securitydemos3userdatakey646F9E0C
                - Arn
        Version: "2012-10-17"
      PolicyName: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF
      Roles:
        - Ref: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: S3DeploymentUserData
      Environment:
        Variables:
          AWS_CA_BUNDLE: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
      Handler: index.handler
      Layers:
        - Ref: userdataassetdeploymentAwsCliLayer6CA537FA
      Role:
        Fn::GetAtt:
          - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
          - Arn
      Runtime: python3.9
      Tags:
        - Key: security-demo
          Value: "true"
      Timeout: 900
    DependsOn:
      - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF
      - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
  ec2instancemodulerole43B94AC9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      RoleName: ec2-security-demo-role
      Tags:
        - Key: security-demo
          Value: "true"
  EC2CreateModuleManagedPolicy63CA4A4D:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for EC2 instance profile role.
      ManagedPolicyName: ec2-inspector-demo-policy
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":kms:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :key/*
            Sid: KMSAllow
          - Action:
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :network-interface/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :security-group/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :subnet/*
            Sid: EC2Allow
          - Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:PutParameter
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ssm:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :parameter
                  - Ref: securitydemoparameter0ACE2DB9
            Sid: SSMAllow
        Version: "2012-10-17"
      Roles:
        - Ref: ec2instancemodulerole43B94AC9
  demoec2instanceInstanceProfile75C2C5AE:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ec2instancemodulerole43B94AC9
    DependsOn:
      - userdataassetdeploymentAwsCliLayer6CA537FA
      - userdataassetdeploymentCustomResourceA93FD77E
  demoec2instanceDD70359F:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 30
            VolumeType: gp2
      IamInstanceProfile:
        Ref: demoec2instanceInstanceProfile75C2C5AE
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3.medium
      SecurityGroupIds:
        - Fn::GetAtt:
            - securitydemosg72A385FB
            - GroupId
      SubnetId:
        Ref: securitydemovpcdemoprivatenatsubnetSubnet1SubnetF2EA78AC
      Tags:
        - Key: Name
          Value: security_services_finding_demo
        - Key: security-demo
          Value: "true"
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                security_service=$(aws ssm get-parameter --name 
              - Ref: securitydemoparameter0ACE2DB9
              - " --region "
              - Ref: AWS::Region
              - |-2
                 --output text --query Parameter.Value)
                sudo aws s3 cp s3://
              - Ref: securitydemos3userdatabucketC56A23F8
              - |-
                /ec2-user-data-demo/$security_service-user-data.sh /home/ec2-user/
                sudo chmod +x /home/ec2-user/$security_service-user-data.sh
                sudo /home/ec2-user/$security_service-user-data.sh
    DependsOn:
      - ec2instancemodulerole43B94AC9
      - userdataassetdeploymentAwsCliLayer6CA537FA
      - userdataassetdeploymentCustomResourceA93FD77E
  lambdaecrcleanuprole6D9E85AE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      RoleName: ecr-lambda-cleanup-role
      Tags:
        - Key: security-demo
          Value: "true"
  lambdaECRCleanupManagedPolicyBBCC8308:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Cleanup deployed ECR Container image resources
      ManagedPolicyName: ecr-cleanup-policy
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - kms:Decrypt
              - kms:Describe*
              - kms:GenerateDataKey
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":kms:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :key/*
            Sid: KMSDecrypt
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ec2instancemodulerole43B94AC9
                - Arn
            Sid: IAMPassRole
          - Action:
              - ec2:AttachNetworkInterface
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:Describe*
              - ec2:RunInstances
              - ec2:TerminateInstances
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ec2:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :*
            Sid: EC2Allow
          - Action: ssm:SendCommand
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :instance/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :s3:::*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ssm:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :document/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ssm:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :managed-instance/*
            Sid: SSMExecute
        Version: "2012-10-17"
      Roles:
        - Ref: lambdaecrcleanuprole6D9E85AE
  ecrcleanupfunctionF139BA80:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: EcrCleanup
      Description: Function to clean up ECR container images built by Inspector demo.
      Handler: ecr_cleanup.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - lambdaecrcleanuprole6D9E85AE
          - Arn
      Runtime: python3.9
      Tags:
        - Key: security-demo
          Value: "true"
      Timeout: 300
    DependsOn:
      - lambdaecrcleanuprole6D9E85AE
  ecrrule9A3A65CE:
    Type: AWS::Events::Rule
    Properties:
      Description: EventBridge Rule cron job to invoke lambda function to cleanup images in the vuln-images ECR repository.
      ScheduleExpression: cron(0 2 2 * ? *)
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - ecrcleanupfunctionF139BA80
              - Arn
          Id: Target0
  ecrruleAllowEventRuleSecurityFindingGeneratorStackecrcleanupfunction3CF36460703572E8:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ecrcleanupfunctionF139BA80
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - ecrrule9A3A65CE
          - Arn
  ecrResourceProviderframeworkonEventServiceRole83957642:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: security-demo
          Value: "true"
  ecrResourceProviderframeworkonEventServiceRoleDefaultPolicyAAA6F566:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ecrcleanupfunctionF139BA80
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ecrcleanupfunctionF139BA80
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: ecrResourceProviderframeworkonEventServiceRoleDefaultPolicyAAA6F566
      Roles:
        - Ref: ecrResourceProviderframeworkonEventServiceRole83957642
  ecrResourceProviderframeworkonEventB34C7296:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: EcrCleanupOnDelete
      Description: AWS CDK resource provider framework - onEvent (SecurityFindingGeneratorStack/ecr_ResourceProvider)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN:
            Fn::GetAtt:
              - ecrcleanupfunctionF139BA80
              - Arn
      Handler: framework.onEvent
      Role:
        Fn::GetAtt:
          - ecrResourceProviderframeworkonEventServiceRole83957642
          - Arn
      Runtime: nodejs18.x
      Tags:
        - Key: security-demo
          Value: "true"
      Timeout: 900
    DependsOn:
      - ecrResourceProviderframeworkonEventServiceRoleDefaultPolicyAAA6F566
      - ecrResourceProviderframeworkonEventServiceRole83957642
  ecrResourceProviderframeworkonEventLogRetention00AEF6F6:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: ecrResourceProviderframeworkonEventB34C7296
      RetentionInDays: 7
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: security-demo
          Value: "true"
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:DeleteRetentionPolicy
              - logs:PutRetentionPolicy
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      Roles:
        - Ref: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 900
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: CWLogRetetion
      Role:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
          - Arn
      Tags:
        - Key: security-demo
          Value: "true"
    DependsOn:
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
  ecrcleanupcustomaction:
    Type: Custom::ActionTarget
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - ecrcleanupfunctionF139BA80
          - Arn
      Action: lambda:InvokeFunction
      Description: The custom Resource to cleanup vuln ECR images.
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  dbpwparameter758A619A:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: .*
      Description: This is an example secret for generating GuardDuty findings.
      Name: gd_prod_dbpwd_sample
      Tags:
        security-demo: "true"
      Tier: Standard
      Type: String
      Value: NA
    Condition: guarddutycondition
  securitydemokmskeyA4F361CB:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for security finding demo.
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
        Version: "2012-10-17"
      PendingWindowInDays: 7
      Tags:
        - Key: security-demo
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Condition: guarddutycondition
  securityservicedemobucketDB0AACC9:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              KMSMasterKeyID:
                Fn::GetAtt:
                  - securitydemokmskeyA4F361CB
                  - Arn
              SSEAlgorithm: aws:kms
      BucketName:
        Fn::Join:
          - ""
          - - guardduty-finding-demo-
            - Ref: AWS::AccountId
            - "-"
            - Ref: AWS::Region
      LoggingConfiguration:
        DestinationBucketName:
          Ref: securitydemos3userdatabucketC56A23F8
        LogFilePrefix: security_service_demo_access_logging
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: security-demo
          Value: "true"
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Condition: guarddutycondition
  securityservicedemobucketPolicy174E48AB:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: securityservicedemobucketDB0AACC9
      PolicyDocument:
        Statement:
          - Action: s3:GetBucketAcl
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Resource:
              Fn::GetAtt:
                - securityservicedemobucketDB0AACC9
                - Arn
          - Action: s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
              StringLike:
                aws:SourceArn:
                  Fn::Join:
                    - ""
                    - - "arn:aws:cloudtrail:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :trail/*
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - securityservicedemobucketDB0AACC9
                      - Arn
                  - /*
        Version: "2012-10-17"
  securityservicedemobucketparameter92BFE963:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: .*
      Description: Bucket name for GuardDuty demo
      Name: /security_demo_bucket_parameter
      Tags:
        security-demo: "true"
      Tier: Standard
      Type: String
      Value:
        Ref: securityservicedemobucketDB0AACC9
    Condition: guarddutycondition
  eksclusternameparameterEBFB62AB:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: .*
      Description: EKS Cluster name for GuardDuty demo
      Name: /security_demo_eks_name_parameter
      Tags:
        security-demo: "true"
      Tier: Standard
      Type: String
      Value: GuardDuty-Finding-Demo
    Condition: guarddutycondition
  securitydemodynamodbB3DD1E6E:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: GuardDuty-example-customer-DB
      Tags:
        - Key: security-demo
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Condition: guarddutycondition
  securitydemodynamodbparameter0E1E1F46:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: .*
      Description: DynamoDB table name for GuardDuty finding.
      Name: /security_demo_dynamodb_name
      Tags:
        security-demo: "true"
      Tier: Standard
      Type: String
      Value:
        Ref: securitydemodynamodbB3DD1E6E
    Condition: guarddutycondition
  guarddutydemouser0B126858:
    Type: AWS::IAM::User
    Properties:
      Tags:
        - Key: security-demo
          Value: "true"
      UserName: guardduty-demo-user
    Condition: guarddutycondition
  compromisedaccesskey16624257:
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Inactive
      UserName:
        Ref: guarddutydemouser0B126858
    Condition: guarddutycondition
  compromisedaccesskeyparameter82ED7E7B:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: .*
      Description:
        Fn::Join:
          - ""
          - - "Demo IAM User access key for "
            - Ref: guarddutydemouser0B126858
            - "."
      Name: /security_demo_access_key
      Tags:
        security-demo: "true"
      Tier: Standard
      Type: String
      Value:
        Ref: compromisedaccesskey16624257
    Condition: guarddutycondition
  compromisedaccesskeysecretF728B00B:
    Type: AWS::SecretsManager::Secret
    Properties:
      KmsKeyId:
        Fn::GetAtt:
          - securitydemos3userdatakey646F9E0C
          - Arn
      Name:
        Fn::Join:
          - ""
          - - Ref: guarddutydemouser0B126858
            - -secret-key
      SecretString:
        Fn::GetAtt:
          - compromisedaccesskey16624257
          - SecretAccessKey
      Tags:
        - Key: security-demo
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Condition: guarddutycondition
  guarddutydemouserpolicy81C4A68A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutBucketLogging
              - s3:PutBucketPublicAccessBlock
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - securityservicedemobucketDB0AACC9
                - Arn
            Sid: EC2Allow
        Version: "2012-10-17"
      PolicyName: guardduty_demo_user_policy
      Users:
        - Ref: guarddutydemouser0B126858
    Condition: guarddutycondition
  guarddutydemouserkey478D22BC:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: guarddutydemouser0B126858
    Condition: guarddutycondition
  ec2generalrole126EB842:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: ec2-general-demo-role
      Tags:
        - Key: security-demo
          Value: "true"
  ec2generalmanagedpolicy56575A6C:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for general EC2 instance profile role.
      ManagedPolicyName: ec2-guardduty-general-demo-policy
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - ssm:DescribeParameters
              - ssm:GetParameter
              - ssm:PutParameter
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ssm:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :parameter
                    - Ref: eksclusternameparameterEBFB62AB
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ssm:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :parameter
                    - Ref: securitydemodynamodbparameter0E1E1F46
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ssm:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :parameter
                    - Ref: securitydemos3userdatabucketparameter668DD41E
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ssm:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :parameter/
                    - Ref: dbpwparameter758A619A
            Sid: SSMWriteAllow
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - securitydemodynamodbB3DD1E6E
                - Arn
            Sid: DynamoDBWriteAllow
          - Action:
              - dynamodb:DescribeTable
              - dynamodb:ListTables
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":dynamodb:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :table/*}
            Sid: DynamoDBReadAllow
          - Action:
              - s3:PutBucketLogging
              - s3:PutBucketPublicAccessBlock
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - securityservicedemobucketDB0AACC9
                - Arn
            Sid: S3DemoWriteAllow
          - Action:
              - s3:GetAccountPublicAccessBlock
              - s3:ListBucket
              - s3:PutAccountPublicAccessBlock
            Effect: Allow
            Resource: "*"
            Sid: S3WriteAllow
          - Action: secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              Ref: compromisedaccesskeysecretF728B00B
            Sid: SecretsManagerReadAllow
        Version: "2012-10-17"
      Roles:
        - Ref: ec2generalrole126EB842
    Condition: guarddutycondition
  compromisedec2instanceInstanceProfileC4F17054:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ec2generalrole126EB842
  compromisedec2instanceF21EFAAC:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 30
            VolumeType: gp2
      IamInstanceProfile:
        Ref: compromisedec2instanceInstanceProfileC4F17054
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.micro
      SecurityGroupIds:
        - Fn::GetAtt:
            - securitydemosg72A385FB
            - GroupId
      SubnetId:
        Ref: securitydemovpcdemoprivatenatsubnetSubnet1SubnetF2EA78AC
      Tags:
        - Key: Name
          Value: guardduty_compromised_finding_demo
        - Key: security-demo
          Value: "true"
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                sleep 60
                sudo aws s3 cp s3://
              - Ref: securitydemos3userdatabucketC56A23F8
              - |-
                /ec2-user-data-demo/guardduty-user-data-credentials.sh /home/ec2-user/
                sudo chmod +x /home/ec2-user/guardduty-user-data-credentials.sh
                sudo /home/ec2-user/guardduty-user-data-credentials.sh
    DependsOn:
      - ec2generalrole126EB842
    Condition: guarddutycondition
  compromisedec2eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId:
        Ref: compromisedec2instanceF21EFAAC
      Tags:
        - Key: security-demo
          Value: "true"
    Condition: guarddutycondition
  lambdathreatlistrole03396CF8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      RoleName: guardduty-threat-list-lambda-role
      Tags:
        - Key: security-demo
          Value: "true"
  lambdaGDThreatListManagedPolicy890278F5:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Add GuardDuty Threat IP list.
      ManagedPolicyName: gd-threat-list-policy
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - guardduty:CreateThreatIntelSet
              - guardduty:GetDetector
              - guardduty:GetThreatIntelSet
              - guardduty:ListDetectors
              - guardduty:ListThreatIntelSets
              - guardduty:UpdateDetector
              - guardduty:UpdateThreatIntelSet
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":guardduty:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :detector/*
            Sid: GuardDutyAllow
          - Action:
              - iam:DeleteRolePolicy
              - iam:PutRolePolicy
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":iam::"
                  - Ref: AWS::AccountId
                  - :role/aws-service-role/guardduty.amazonaws.com/AWSServiceRoleForAmazonGuardDuty
            Sid: IAMAllow
        Version: "2012-10-17"
      Roles:
        - Ref: lambdathreatlistrole03396CF8
    Condition: guarddutycondition
  guarddutythreatlistfunction69378CD7:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: GDThreatList
      Description: Function to put GuardDuty Threat IP list for demo.
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: securitydemos3userdatabucketC56A23F8
          THREAT_LIST:
            Fn::GetAtt:
              - compromisedec2instanceF21EFAAC
              - PrivateIp
      FunctionName: guardduty_threat_list_function
      Handler: threat_list.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - lambdathreatlistrole03396CF8
          - Arn
      Runtime: python3.9
      Tags:
        - Key: security-demo
          Value: "true"
      Timeout: 120
    DependsOn:
      - lambdathreatlistrole03396CF8
    Condition: guarddutycondition
  guarddutythreatlistproviderframeworkonEventServiceRole17D02AE6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: security-demo
          Value: "true"
  guarddutythreatlistproviderframeworkonEventServiceRoleDefaultPolicyF24F1A84:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - guarddutythreatlistfunction69378CD7
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - guarddutythreatlistfunction69378CD7
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: guarddutythreatlistproviderframeworkonEventServiceRoleDefaultPolicyF24F1A84
      Roles:
        - Ref: guarddutythreatlistproviderframeworkonEventServiceRole17D02AE6
  guarddutythreatlistproviderframeworkonEvent393B7B90:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: GDThreatListUpdate
      Description: AWS CDK resource provider framework - onEvent (SecurityFindingGeneratorStack/guardduty_threat_list_provider)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN:
            Fn::GetAtt:
              - guarddutythreatlistfunction69378CD7
              - Arn
      Handler: framework.onEvent
      Role:
        Fn::GetAtt:
          - guarddutythreatlistproviderframeworkonEventServiceRole17D02AE6
          - Arn
      Runtime: nodejs18.x
      Tags:
        - Key: security-demo
          Value: "true"
      Timeout: 900
    DependsOn:
      - guarddutythreatlistproviderframeworkonEventServiceRoleDefaultPolicyF24F1A84
      - guarddutythreatlistproviderframeworkonEventServiceRole17D02AE6
  guarddutythreatlistproviderframeworkonEventLogRetentionCA91CF17:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: guarddutythreatlistproviderframeworkonEvent393B7B90
      RetentionInDays: 7
  threatlistcustguarddutythreatlistcustomactionomaction:
    Type: Custom::ActionTarget
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - guarddutythreatlistfunction69378CD7
          - Arn
      Action: lambda:InvokeFunction
      Description: The custom Resource to add to the GuardDuty threat list.
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Condition: guarddutycondition
  guarddutytopic4054B514:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: GuardDuty Demo IAM SNS topic
      KmsMasterKeyId:
        Fn::GetAtt:
          - securitydemos3userdatakey646F9E0C
          - Arn
      Tags:
        - Key: security-demo
          Value: "true"
    Condition: guarddutycondition
  guarddutytopicPolicy26B9F944:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource:
              Ref: guarddutytopic4054B514
            Sid: "0"
        Version: "2012-10-17"
      Topics:
        - Ref: guarddutytopic4054B514
  guarddutyiamremediationrole72463300:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: guardduty-demo-iam-remediation-role
      Tags:
        - Key: security-demo
          Value: "true"
    Condition: guarddutycondition
  lambdaGDIAMRemediationManagedPolicy62F720D5:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Remediate GuardDuty IAM findings from the demo.
      ManagedPolicyName: gd-iam-remediation-policy
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - ssm:DescribeParameters
              - ssm:GetParameter
              - ssm:GetParameters
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ssm:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :parameter/*
            Sid: SSMAccess
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ec2instancemodulerole43B94AC9
                - Arn
            Sid: IAMPassRole
          - Action:
              - ec2:DescribeIamInstanceProfileAssociations
              - ec2:ReplaceIamInstanceProfileAssociation
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ec2:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :instance/*
            Sid: EC2Allow
          - Action:
              - iam:AddRoleToInstanceProfile
              - iam:CreateInstanceProfile
              - iam:ListInstanceProfilesForRole
              - iam:RemoveRoleFromInstanceProfile
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":iam::"
                  - Ref: AWS::AccountId
                  - :instance-profile/*
            Sid: IAMAllow
          - Action:
              - iam:DeleteInstanceProfile
              - iam:PassRole
              - iam:PutRolePolicy
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ec2generalrole126EB842
                  - Arn
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :role/eksctl-GuardDuty-Finding-Demo-addon-iamservi-Role1-*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :role/eksctl-GuardDuty-Finding-Demo-nod-NodeInstanceRole-*
            Sid: CompromisedEC2Remediation
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: guarddutytopic4054B514
            Sid: SNSAllow
        Version: "2012-10-17"
      Roles:
        - Ref: guarddutyiamremediationrole72463300
    Condition: guarddutycondition
  guarddutyiamremediationfunction19200E5D:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: GDIamRemediate
      Description: Function to remediate GuardDuty Instance Credential Exfil findings.
      Environment:
        Variables:
          TOPIC_ARN:
            Ref: guarddutytopic4054B514
      FunctionName: guardduty_iam_remediation_function
      Handler: gd_remediate_iam.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - guarddutyiamremediationrole72463300
          - Arn
      Runtime: python3.9
      Tags:
        - Key: security-demo
          Value: "true"
      Timeout: 300
    DependsOn:
      - guarddutyiamremediationrole72463300
    Condition: guarddutycondition
  lambdaekscleanuproleB9A435D9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      RoleName: eks-lambda-cleanup-role
      Tags:
        - Key: security-demo
          Value: "true"
    Condition: guarddutycondition
  lambdaEKSCleanupManagedPolicyB977EE91:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Cleanup deployed EKS CloudFormation template resources from GuardDuty demo.
      ManagedPolicyName: eks-cleanup-policy
      Path: /
      PolicyDocument:
        Statement:
          - Action: elasticloadbalancing:Describe*
            Effect: Allow
            Resource: "*"
            Sid: ELBRead
          - Action: elasticloadbalancing:DeleteLoadBalancer
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":elasticloadbalancing:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :loadbalancer/*
            Sid: ELBWrite
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: guarddutytopic4054B514
            Sid: SNSWrite
          - Action:
              - cloudformation:Describe*
              - cloudformation:ListStacks
            Effect: Allow
            Resource: "*"
            Sid: CFNRead
          - Action: cloudformation:DeleteStack
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":cloudformation:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :stack/eksctl-GuardDuty-Finding-Demo-addon-iamserviceaccount-kube-system-aws-node/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":cloudformation:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :stack/eksctl-GuardDuty-Finding-Demo-cluster/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":cloudformation:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :stack/eksctl-GuardDuty-Finding-Demo-nodegroup-ng-*/*
            Sid: CFNDelete
          - Action:
              - ec2:DeleteLaunchTemplate
              - ec2:DeleteNatGateway
              - ec2:DeleteRoute
              - ec2:DeleteRouteTable
              - ec2:DeleteSecurityGroup
              - ec2:DeleteSubnet
              - ec2:Describe*
              - ec2:DetachInternetGateway
              - ec2:RevokeSecurityGroupIngress
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :internet-gateway/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :launch-template/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :natgateway/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :route-table/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :security-group/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :subnet/*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":ec2:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :vpc/*
            Sid: EC2Write
          - Action: ec2:DisassociateRouteTable
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ec2:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :*
            Sid: EC2DisassociateRouteTable
          - Action:
              - eks:DeleteCluster
              - eks:DeleteNodegroup
              - eks:Describe*
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":eks:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :cluster/GuardDuty-Finding-Demo
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":eks:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :nodegroup/GuardDuty-Finding-Demo/*
            Sid: EKSRead
          - Action:
              - iam:DeleteRole
              - iam:DeleteRolePolicy
              - iam:DetachRolePolicy
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :role/eksctl-GuardDuty-Finding-Demo-addon-iamservi-Role1-*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :role/eksctl-GuardDuty-Finding-Demo-cluster-ServiceRole-*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :role/eksctl-GuardDuty-Finding-Demo-nod-NodeInstanceRole-*
            Sid: IAMWrite
        Version: "2012-10-17"
      Roles:
        - Ref: lambdaekscleanuproleB9A435D9
    Condition: guarddutycondition
  ekscleanupfunctionA5DAE504:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: EksCleanup
      Description: Function to clean up EKS CloudFormation template resources built from GuardDuty demo.
      Handler: eks_cleanup.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - lambdaekscleanuproleB9A435D9
          - Arn
      Runtime: python3.9
      Tags:
        - Key: security-demo
          Value: "true"
      Timeout: 900
    DependsOn:
      - lambdaekscleanuproleB9A435D9
  eksproviderframeworkonEventServiceRole84214663:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: security-demo
          Value: "true"
  eksproviderframeworkonEventServiceRoleDefaultPolicy775F29AB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ekscleanupfunctionA5DAE504
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ekscleanupfunctionA5DAE504
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: eksproviderframeworkonEventServiceRoleDefaultPolicy775F29AB
      Roles:
        - Ref: eksproviderframeworkonEventServiceRole84214663
  eksproviderframeworkonEventBDC21500:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: EksCleanupOnDelete
      Description: AWS CDK resource provider framework - onEvent (SecurityFindingGeneratorStack/eks_provider)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN:
            Fn::GetAtt:
              - ekscleanupfunctionA5DAE504
              - Arn
      Handler: framework.onEvent
      Role:
        Fn::GetAtt:
          - eksproviderframeworkonEventServiceRole84214663
          - Arn
      Runtime: nodejs18.x
      Tags:
        - Key: security-demo
          Value: "true"
      Timeout: 900
    DependsOn:
      - eksproviderframeworkonEventServiceRoleDefaultPolicy775F29AB
      - eksproviderframeworkonEventServiceRole84214663
  eksproviderframeworkonEventLogRetentionB59CA96C:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: eksproviderframeworkonEventBDC21500
      RetentionInDays: 7
  ekscleanupcustomaction:
    Type: Custom::ActionTarget
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - ekscleanupfunctionA5DAE504
          - Arn
      Action: lambda:InvokeFunction
      Description: The custom Resource to clean up EKS CloudFormation template resources built from GuardDuty demo.
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  guarddutyeksremediationfunctionC5E0C831:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: S3BucketCode
        S3Key:
          Ref: GDEksRemediate
      Description: Function to remediate EKS GuardDuty findings.
      Environment:
        Variables:
          TOPIC_ARN:
            Ref: guarddutytopic4054B514
      FunctionName: guardduty_demo_eks_remediation_function
      Handler: gd_remediate_eks.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - lambdaekscleanuproleB9A435D9
          - Arn
      Runtime: python3.9
      Tags:
        - Key: security-demo
          Value: "true"
      Timeout: 900
    DependsOn:
      - lambdaekscleanuproleB9A435D9
    Condition: guarddutycondition
  guarddutyremediationeksrule92B11FBD:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventBridge Rule to notify and respond to GuardDuty Event: PrivilegeEscalation:Kubernetes/PrivilegedContainer findings."
      EventPattern:
        source:
          - aws.guardduty
        detail:
          type:
            - PrivilegeEscalation:Kubernetes/PrivilegedContainer
            - Execution:Kubernetes/ExecInKubeSystemPod
      Name: GuardDuty-Event-EKS-Cleanup
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - guarddutyeksremediationfunctionC5E0C831
              - Arn
          Id: Target0
        - Arn:
            Ref: guarddutytopic4054B514
          Id: Target1
          Input: '{"inputPathsMap":{"cluster":"$.detail.resource.EksClusterDetails.Name","gdid":"$.detail.id","region":"$.detail.region"},"inputTemplate":"\"GuardDuty Finding | ID:<gdid>: An EKS Cluster named <cluster> may be compromised and should be investigated. Go to https://console.aws.amazon.com/guardduty/home?region=<region>#/findings?macros=current&fId=<gdid>\""}'
    Condition: guarddutycondition
  guarddutyremediationeksruleAllowEventRuleSecurityFindingGeneratorStackguarddutyeksremediationfunctionA12C8F7525EB312E:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - guarddutyeksremediationfunctionC5E0C831
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - guarddutyremediationeksrule92B11FBD
          - Arn
  guarddutyremediationcredexfilrule1771230D:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventBridge Rule to notify and respond to GuardDuty Event: UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS findings."
      EventPattern:
        source:
          - aws.guardduty
        detail:
          type:
            - UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS
      Name: GuardDuty-Event-IAMUser-InstanceCredentialExfiltration
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - guarddutyiamremediationfunction19200E5D
              - Arn
          Id: Target0
        - Arn:
            Ref: guarddutytopic4054B514
          Id: Target1
          Input: '{"inputPathsMap":{"userName":"$.detail.resource.accessKeyDetails.userName","gdid":"$.detail.id","region":"$.detail.region"},"inputTemplate":"\"GuardDuty Finding | ID:<gdid>: An EC2 instance IAM credentials (Role: <userName>) may be compromised and should be investigated. Go to https://console.aws.amazon.com/guardduty/home?region=<region>#/findings?macros=current&fId=<gdid>\""}'
    Condition: guarddutycondition
  guarddutyremediationcredexfilruleAllowEventRuleSecurityFindingGeneratorStackguarddutyiamremediationfunction3107FC15B791C3A2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - guarddutyiamremediationfunction19200E5D
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - guarddutyremediationcredexfilrule1771230D
          - Arn
  guarddutyrespondIAMUserrule420C77E9:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventBridge Rule to notify for GuardDuty Event: UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom findings."
      EventPattern:
        source:
          - aws.guardduty
        detail:
          type:
            - UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom
            - Discovery:S3/MaliciousIPCaller.Custom
      Name: GuardDuty-Event-IAMUser-MaliciousIPCaller
      State: ENABLED
      Targets:
        - Arn:
            Ref: guarddutytopic4054B514
          Id: Target0
          Input: '{"inputPathsMap":{"userName":"$.detail.resource.accessKeyDetails.userName","gdid":"$.detail.id","region":"$.detail.region"},"inputTemplate":"\"GuardDuty Finding | ID:<gdid>: An AWS API operation was invoked (userName: <userName>) from an IP address that is included on your threat list and should be investigated. Go to https://console.aws.amazon.com/guardduty/home?region=<region>#/findings?macros=current&fId=<gdid>\""}'
    Condition: guarddutycondition
  guarddutyrespondS3rule2864D3F4:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventBridge Rule to notify for GuardDuty Event: Stealth:S3/ServerAccessLoggingDisabled & Policy:S3/BucketBlockPublicAccessDisabled."
      EventPattern:
        source:
          - aws.guardduty
        detail:
          type:
            - Policy:S3/BucketBlockPublicAccessDisabled
            - Stealth:S3/ServerAccessLoggingDisabled
      Name: GuardDuty-Event-S3-Stealth-Policy
      State: ENABLED
      Targets:
        - Arn:
            Ref: guarddutytopic4054B514
          Id: Target0
          Input: '{"inputPathsMap":{"userName":"$.detail.resource.accessKeyDetails.userName","gdid":"$.detail.id","region":"$.detail.region"},"inputTemplate":"\"GuardDuty Finding | ID:<gdid>: An AWS S3 related API operation was invoked by user (userName: <userName>) in account <account> . This activity seems suspicious. Please investigate with the user to check if this was expectated behaviour. Go to https://console.aws.amazon.com/guardduty/home?region=<region>#/findings?macros=current&fId=<gdid>\""}'
    Condition: guarddutycondition
  gdiamsubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
          - guarddutyiamremediationfunction19200E5D
          - Arn
      Protocol: lambda
      TopicArn:
        Ref: guarddutytopic4054B514
    Condition: guarddutycondition
  gdekssubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
          - guarddutyeksremediationfunctionC5E0C831
          - Arn
      Protocol: lambda
      TopicArn:
        Ref: guarddutytopic4054B514
    Condition: guarddutycondition
Conditions:
  guarddutycondition:
    Fn::Equals:
      - Ref: securityserviceuserdata
      - guardduty
