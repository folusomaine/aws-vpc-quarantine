AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template
Metadata:
  Version: 1.0.0

Resources:
  TaskOneVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      Tags:
        - Key: "Name"
          Value: "TaskOne"

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 192.168.0.0/18
      Tags:
        - Key: "Name"
          Value: "private-subnet"
      VpcId: !Ref TaskOneVpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 192.168.64.0/18
      Tags:
        - Key: "Name"
          Value: "public-subnet"
      VpcId: !Ref TaskOneVpc

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "taskOneIgw"
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref TaskOneVpc

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: "Name"
          Value: "public-route-table"
      VpcId: !Ref TaskOneVpc

  PublicRouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
       RouteTableId: !Ref PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref myInternetGateway

  PublicEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0b0dcb5067f052a63
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !GetAtt PublicInstanceSecurityGroup.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/sdm
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: false
            VolumeSize: 20
      Tags:
        - Key: "Name"
          Value: "public-ec2"

  PrivateEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0b0dcb5067f052a63
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt PublicInstanceSecurityGroup.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/sdm
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: false
            VolumeSize: 20
      Tags:
        - Key: "Name"
          Value: "private-ec2"

  PublicInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "public instance ingress"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: "ssh"
          FromPort: 22
          IpProtocol: -1
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: "http"
          FromPort: 80
          IpProtocol: -1
          ToPort: 80
      VpcId: !Ref TaskOneVpc

  PrivateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "private instance ingress"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: "ssh"
          FromPort: 22
          IpProtocol: -1
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: "http"
          FromPort: 80
          IpProtocol: -1
          ToPort: 80
      VpcId: !Ref TaskOneVpc

  PrivateNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref myNetworkAcl
      SubnetId: !Ref PrivateSubnet
  PublicNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref myNetworkAcl
      SubnetId: !Ref PublicSubnet

  myNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref TaskOneVpc
      Tags:
      - Key: "Name"
        Value: "private-public-subnet-nacl"

  SSHInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref myNetworkAcl
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 192.168.0.0/18
       PortRange:
         From: 22
         To: 22

  HTTPInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref myNetworkAcl
       RuleNumber: 200
       Protocol: 6
       RuleAction: allow
       CidrBlock: 192.168.0.0/16
       PortRange:
         From: 80
         To: 80

  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref myNetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0